version: "3.8"

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - backend/.env
    depends_on:
      db:
        condition: service_healthy  # Attendre que PostgreSQL soit prÃªt
    restart: always
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn --workers 4 --bind 0.0.0.0:8000 Train_Hire_AI.wsgi:application"
    networks:
      - app_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - backend
    restart: always
    networks:
      - app_network

  db:
    image: postgres:14
    env_file:
      - backend/.env  # Charger les variables DB
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER"]
      interval: 10s
      retries: 5
      timeout: 5s
    restart: always
    networks:
      - app_network

volumes:
  postgres_data:

networks:
  app_network:
    driver: bridge